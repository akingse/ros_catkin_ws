// Generated by gencpp from file probot_msgs/PredefinedPoint.msg
// DO NOT EDIT!


#ifndef PROBOT_MSGS_MESSAGE_PREDEFINEDPOINT_H
#define PROBOT_MSGS_MESSAGE_PREDEFINEDPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace probot_msgs
{
template <class ContainerAllocator>
struct PredefinedPoint_
{
  typedef PredefinedPoint_<ContainerAllocator> Type;

  PredefinedPoint_()
    : name()
    , pose()
    , joints()
    , digitalOutput(0)
    , relayOutput(0)
    , pointDelayBeforeExecute(0.0)  {
    }
  PredefinedPoint_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , pose(_alloc)
    , joints(_alloc)
    , digitalOutput(0)
    , relayOutput(0)
    , pointDelayBeforeExecute(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joints_type;
  _joints_type joints;

   typedef uint32_t _digitalOutput_type;
  _digitalOutput_type digitalOutput;

   typedef uint32_t _relayOutput_type;
  _relayOutput_type relayOutput;

   typedef double _pointDelayBeforeExecute_type;
  _pointDelayBeforeExecute_type pointDelayBeforeExecute;





  typedef boost::shared_ptr< ::probot_msgs::PredefinedPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::probot_msgs::PredefinedPoint_<ContainerAllocator> const> ConstPtr;

}; // struct PredefinedPoint_

typedef ::probot_msgs::PredefinedPoint_<std::allocator<void> > PredefinedPoint;

typedef boost::shared_ptr< ::probot_msgs::PredefinedPoint > PredefinedPointPtr;
typedef boost::shared_ptr< ::probot_msgs::PredefinedPoint const> PredefinedPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::probot_msgs::PredefinedPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace probot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'probot_msgs': ['/home/akingse/catkin_ws/src/PROBOT_Anno/probot_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::PredefinedPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::PredefinedPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::PredefinedPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f308b55170bd625509ff7caf9b3e7ca9";
  }

  static const char* value(const ::probot_msgs::PredefinedPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf308b55170bd6255ULL;
  static const uint64_t static_value2 = 0x09ff7caf9b3e7ca9ULL;
};

template<class ContainerAllocator>
struct DataType< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "probot_msgs/PredefinedPoint";
  }

  static const char* value(const ::probot_msgs::PredefinedPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The Predefined message contains the information of a pre-defined point on rviz\n\
\n\
string name\n\
geometry_msgs/Pose pose\n\
float64[] joints\n\
uint32 digitalOutput\n\
uint32 relayOutput\n\
float64 pointDelayBeforeExecute\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::probot_msgs::PredefinedPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.pose);
      stream.next(m.joints);
      stream.next(m.digitalOutput);
      stream.next(m.relayOutput);
      stream.next(m.pointDelayBeforeExecute);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredefinedPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::probot_msgs::PredefinedPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::probot_msgs::PredefinedPoint_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "digitalOutput: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.digitalOutput);
    s << indent << "relayOutput: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.relayOutput);
    s << indent << "pointDelayBeforeExecute: ";
    Printer<double>::stream(s, indent + "  ", v.pointDelayBeforeExecute);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOT_MSGS_MESSAGE_PREDEFINEDPOINT_H
