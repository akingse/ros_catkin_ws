// Generated by gencpp from file probot_vision/VisionMatrix.msg
// DO NOT EDIT!


#ifndef PROBOT_VISION_MESSAGE_VISIONMATRIX_H
#define PROBOT_VISION_MESSAGE_VISIONMATRIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace probot_vision
{
template <class ContainerAllocator>
struct VisionMatrix_
{
  typedef VisionMatrix_<ContainerAllocator> Type;

  VisionMatrix_()
    : cameraMatrix()
    , distCoeffs()
    , ExternalMatrix()
    , hmatrix()
    , xmatrix()  {
    }
  VisionMatrix_(const ContainerAllocator& _alloc)
    : cameraMatrix(_alloc)
    , distCoeffs(_alloc)
    , ExternalMatrix(_alloc)
    , hmatrix(_alloc)
    , xmatrix(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cameraMatrix_type;
  _cameraMatrix_type cameraMatrix;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _distCoeffs_type;
  _distCoeffs_type distCoeffs;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ExternalMatrix_type;
  _ExternalMatrix_type ExternalMatrix;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _hmatrix_type;
  _hmatrix_type hmatrix;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _xmatrix_type;
  _xmatrix_type xmatrix;





  typedef boost::shared_ptr< ::probot_vision::VisionMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::probot_vision::VisionMatrix_<ContainerAllocator> const> ConstPtr;

}; // struct VisionMatrix_

typedef ::probot_vision::VisionMatrix_<std::allocator<void> > VisionMatrix;

typedef boost::shared_ptr< ::probot_vision::VisionMatrix > VisionMatrixPtr;
typedef boost::shared_ptr< ::probot_vision::VisionMatrix const> VisionMatrixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::probot_vision::VisionMatrix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::probot_vision::VisionMatrix_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace probot_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'probot_vision': ['/home/akingse/catkin_ws/src/PROBOT_Anno/probot_vision_pick/probot_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::probot_vision::VisionMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::probot_vision::VisionMatrix_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_vision::VisionMatrix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_vision::VisionMatrix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_vision::VisionMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_vision::VisionMatrix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::probot_vision::VisionMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2e4f9b4abcd2e9270ca5b9713f7ed35";
  }

  static const char* value(const ::probot_vision::VisionMatrix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2e4f9b4abcd2e92ULL;
  static const uint64_t static_value2 = 0x70ca5b9713f7ed35ULL;
};

template<class ContainerAllocator>
struct DataType< ::probot_vision::VisionMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "probot_vision/VisionMatrix";
  }

  static const char* value(const ::probot_vision::VisionMatrix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::probot_vision::VisionMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] cameraMatrix\n\
float64[] distCoeffs\n\
float64[] ExternalMatrix\n\
float64[] hmatrix\n\
float64[] xmatrix\n\
";
  }

  static const char* value(const ::probot_vision::VisionMatrix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::probot_vision::VisionMatrix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cameraMatrix);
      stream.next(m.distCoeffs);
      stream.next(m.ExternalMatrix);
      stream.next(m.hmatrix);
      stream.next(m.xmatrix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisionMatrix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::probot_vision::VisionMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::probot_vision::VisionMatrix_<ContainerAllocator>& v)
  {
    s << indent << "cameraMatrix[]" << std::endl;
    for (size_t i = 0; i < v.cameraMatrix.size(); ++i)
    {
      s << indent << "  cameraMatrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cameraMatrix[i]);
    }
    s << indent << "distCoeffs[]" << std::endl;
    for (size_t i = 0; i < v.distCoeffs.size(); ++i)
    {
      s << indent << "  distCoeffs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distCoeffs[i]);
    }
    s << indent << "ExternalMatrix[]" << std::endl;
    for (size_t i = 0; i < v.ExternalMatrix.size(); ++i)
    {
      s << indent << "  ExternalMatrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ExternalMatrix[i]);
    }
    s << indent << "hmatrix[]" << std::endl;
    for (size_t i = 0; i < v.hmatrix.size(); ++i)
    {
      s << indent << "  hmatrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hmatrix[i]);
    }
    s << indent << "xmatrix[]" << std::endl;
    for (size_t i = 0; i < v.xmatrix.size(); ++i)
    {
      s << indent << "  xmatrix[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xmatrix[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOT_VISION_MESSAGE_VISIONMATRIX_H
