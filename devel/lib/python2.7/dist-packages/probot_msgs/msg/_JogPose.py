# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from probot_msgs/JogPose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JogPose(genpy.Message):
  _md5sum = "d193764a9f7e2d9ca8e4aaaa3600bff9"
  _type = "probot_msgs/JogPose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The Jogging pose message contains control information for jogging
# end-effector to a target pose
# It means stopping jogging if mask is JOGGING_STOP

# The bit map mask to indicate which pose data is jogged
int8 mask

# The jogging direction
int8 direction

# The jogging mode
int8 mode

# The velocity scale for move_group interface
float32 velocity_scale

# The jogging frame id
int8 frame_id

int8 DIR_PLUS = 0
int8 DIR_MINUS = 1

# bit map of jogging
int8 JOGGING_STOP = 0
int8 JOGGING_X = 1
int8 JOGGING_Y = 2
int8 JOGGING_Z = 4
int8 JOGGING_ROLL = 8
int8 JOGGING_PITCH = 16
int8 JOGGING_YAW = 32

int8 MOD_CONTINUOUS            = 0
int8 MOD_INCREMENT_10_MM       = 1
int8 MOD_INCREMENT_1_MM        = 2
int8 MOD_INCREMENT_01_MM       = 3"""
  # Pseudo-constants
  DIR_PLUS = 0
  DIR_MINUS = 1
  JOGGING_STOP = 0
  JOGGING_X = 1
  JOGGING_Y = 2
  JOGGING_Z = 4
  JOGGING_ROLL = 8
  JOGGING_PITCH = 16
  JOGGING_YAW = 32
  MOD_CONTINUOUS = 0
  MOD_INCREMENT_10_MM = 1
  MOD_INCREMENT_1_MM = 2
  MOD_INCREMENT_01_MM = 3

  __slots__ = ['mask','direction','mode','velocity_scale','frame_id']
  _slot_types = ['int8','int8','int8','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mask,direction,mode,velocity_scale,frame_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JogPose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mask is None:
        self.mask = 0
      if self.direction is None:
        self.direction = 0
      if self.mode is None:
        self.mode = 0
      if self.velocity_scale is None:
        self.velocity_scale = 0.
      if self.frame_id is None:
        self.frame_id = 0
    else:
      self.mask = 0
      self.direction = 0
      self.mode = 0
      self.velocity_scale = 0.
      self.frame_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3bfb().pack(_x.mask, _x.direction, _x.mode, _x.velocity_scale, _x.frame_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.mask, _x.direction, _x.mode, _x.velocity_scale, _x.frame_id,) = _get_struct_3bfb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3bfb().pack(_x.mask, _x.direction, _x.mode, _x.velocity_scale, _x.frame_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.mask, _x.direction, _x.mode, _x.velocity_scale, _x.frame_id,) = _get_struct_3bfb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3bfb = None
def _get_struct_3bfb():
    global _struct_3bfb
    if _struct_3bfb is None:
        _struct_3bfb = struct.Struct("<3bfb")
    return _struct_3bfb
