# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from probot_msgs/Config.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Config(genpy.Message):
  _md5sum = "cd76bb6e4c9a57426c629f8fe5205f36"
  _type = "probot_msgs/Config"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The Config message contains system configuration data

# The output log level for controller
int8 controller_log_level
bool init_with_all_zero_pos

# The zero calibration parameters
bool        enable_joint_calibration
float32[]   seneor_position
float32[]   speed_to_sensor
float32[]   speed_to_zero

# The tool's relative pose to end-effector(tool0)
# This is used to jog tool instead of end-effector
# If it is to jog end-effector, set pose_to_eef to 0, that is (0,0,0)(0,0,0,1)
geometry_msgs/Pose[] pose_to_eef

# The bit-map mask of valid fields which this message contains
int32 mask

int32 MASK_LOGLEVEL          = 1
int32 MASK_ZERO_CALIBRATION  = 2
int32 MASK_TOOL_POSE         = 4

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  MASK_LOGLEVEL = 1
  MASK_ZERO_CALIBRATION = 2
  MASK_TOOL_POSE = 4

  __slots__ = ['controller_log_level','init_with_all_zero_pos','enable_joint_calibration','seneor_position','speed_to_sensor','speed_to_zero','pose_to_eef','mask']
  _slot_types = ['int8','bool','bool','float32[]','float32[]','float32[]','geometry_msgs/Pose[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controller_log_level,init_with_all_zero_pos,enable_joint_calibration,seneor_position,speed_to_sensor,speed_to_zero,pose_to_eef,mask

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Config, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.controller_log_level is None:
        self.controller_log_level = 0
      if self.init_with_all_zero_pos is None:
        self.init_with_all_zero_pos = False
      if self.enable_joint_calibration is None:
        self.enable_joint_calibration = False
      if self.seneor_position is None:
        self.seneor_position = []
      if self.speed_to_sensor is None:
        self.speed_to_sensor = []
      if self.speed_to_zero is None:
        self.speed_to_zero = []
      if self.pose_to_eef is None:
        self.pose_to_eef = []
      if self.mask is None:
        self.mask = 0
    else:
      self.controller_log_level = 0
      self.init_with_all_zero_pos = False
      self.enable_joint_calibration = False
      self.seneor_position = []
      self.speed_to_sensor = []
      self.speed_to_zero = []
      self.pose_to_eef = []
      self.mask = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b2B().pack(_x.controller_log_level, _x.init_with_all_zero_pos, _x.enable_joint_calibration))
      length = len(self.seneor_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.seneor_position))
      length = len(self.speed_to_sensor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.speed_to_sensor))
      length = len(self.speed_to_zero)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.speed_to_zero))
      length = len(self.pose_to_eef)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_to_eef:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.mask
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_to_eef is None:
        self.pose_to_eef = None
      end = 0
      _x = self
      start = end
      end += 3
      (_x.controller_log_level, _x.init_with_all_zero_pos, _x.enable_joint_calibration,) = _get_struct_b2B().unpack(str[start:end])
      self.init_with_all_zero_pos = bool(self.init_with_all_zero_pos)
      self.enable_joint_calibration = bool(self.enable_joint_calibration)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.seneor_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.speed_to_sensor = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.speed_to_zero = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_to_eef = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.pose_to_eef.append(val1)
      start = end
      end += 4
      (self.mask,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b2B().pack(_x.controller_log_level, _x.init_with_all_zero_pos, _x.enable_joint_calibration))
      length = len(self.seneor_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.seneor_position.tostring())
      length = len(self.speed_to_sensor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.speed_to_sensor.tostring())
      length = len(self.speed_to_zero)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.speed_to_zero.tostring())
      length = len(self.pose_to_eef)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_to_eef:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.mask
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose_to_eef is None:
        self.pose_to_eef = None
      end = 0
      _x = self
      start = end
      end += 3
      (_x.controller_log_level, _x.init_with_all_zero_pos, _x.enable_joint_calibration,) = _get_struct_b2B().unpack(str[start:end])
      self.init_with_all_zero_pos = bool(self.init_with_all_zero_pos)
      self.enable_joint_calibration = bool(self.enable_joint_calibration)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.seneor_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.speed_to_sensor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.speed_to_zero = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_to_eef = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.pose_to_eef.append(val1)
      start = end
      end += 4
      (self.mask,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_b2B = None
def _get_struct_b2B():
    global _struct_b2B
    if _struct_b2B is None:
        _struct_b2B = struct.Struct("<b2B")
    return _struct_b2B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
