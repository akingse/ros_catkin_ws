# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from probot_msgs/ProbotStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ProbotStatus(genpy.Message):
  _md5sum = "8545ed5a2953e67b3a5193c804789850"
  _type = "probot_msgs/ProbotStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] jointsPosition
geometry_msgs/Pose probotPose

bool[] inputIOs
bool[] outputIOs
bool[] outputRelay
bool[] inputButton
bool[] inputLimitSensors
bool[] inputHomeSensors

int8 IO_OFF = 0
int8 IO_ON = 1
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  IO_OFF = 0
  IO_ON = 1

  __slots__ = ['jointsPosition','probotPose','inputIOs','outputIOs','outputRelay','inputButton','inputLimitSensors','inputHomeSensors']
  _slot_types = ['float64[]','geometry_msgs/Pose','bool[]','bool[]','bool[]','bool[]','bool[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       jointsPosition,probotPose,inputIOs,outputIOs,outputRelay,inputButton,inputLimitSensors,inputHomeSensors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProbotStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.jointsPosition is None:
        self.jointsPosition = []
      if self.probotPose is None:
        self.probotPose = geometry_msgs.msg.Pose()
      if self.inputIOs is None:
        self.inputIOs = []
      if self.outputIOs is None:
        self.outputIOs = []
      if self.outputRelay is None:
        self.outputRelay = []
      if self.inputButton is None:
        self.inputButton = []
      if self.inputLimitSensors is None:
        self.inputLimitSensors = []
      if self.inputHomeSensors is None:
        self.inputHomeSensors = []
    else:
      self.jointsPosition = []
      self.probotPose = geometry_msgs.msg.Pose()
      self.inputIOs = []
      self.outputIOs = []
      self.outputRelay = []
      self.inputButton = []
      self.inputLimitSensors = []
      self.inputHomeSensors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.jointsPosition)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.jointsPosition))
      _x = self
      buff.write(_get_struct_7d().pack(_x.probotPose.position.x, _x.probotPose.position.y, _x.probotPose.position.z, _x.probotPose.orientation.x, _x.probotPose.orientation.y, _x.probotPose.orientation.z, _x.probotPose.orientation.w))
      length = len(self.inputIOs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputIOs))
      length = len(self.outputIOs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputIOs))
      length = len(self.outputRelay)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.outputRelay))
      length = len(self.inputButton)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputButton))
      length = len(self.inputLimitSensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputLimitSensors))
      length = len(self.inputHomeSensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.inputHomeSensors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.probotPose is None:
        self.probotPose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.jointsPosition = s.unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.probotPose.position.x, _x.probotPose.position.y, _x.probotPose.position.z, _x.probotPose.orientation.x, _x.probotPose.orientation.y, _x.probotPose.orientation.z, _x.probotPose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputIOs = s.unpack(str[start:end])
      self.inputIOs = list(map(bool, self.inputIOs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputIOs = s.unpack(str[start:end])
      self.outputIOs = list(map(bool, self.outputIOs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputRelay = s.unpack(str[start:end])
      self.outputRelay = list(map(bool, self.outputRelay))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputButton = s.unpack(str[start:end])
      self.inputButton = list(map(bool, self.inputButton))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputLimitSensors = s.unpack(str[start:end])
      self.inputLimitSensors = list(map(bool, self.inputLimitSensors))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputHomeSensors = s.unpack(str[start:end])
      self.inputHomeSensors = list(map(bool, self.inputHomeSensors))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.jointsPosition)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.jointsPosition.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.probotPose.position.x, _x.probotPose.position.y, _x.probotPose.position.z, _x.probotPose.orientation.x, _x.probotPose.orientation.y, _x.probotPose.orientation.z, _x.probotPose.orientation.w))
      length = len(self.inputIOs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputIOs.tostring())
      length = len(self.outputIOs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputIOs.tostring())
      length = len(self.outputRelay)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.outputRelay.tostring())
      length = len(self.inputButton)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputButton.tostring())
      length = len(self.inputLimitSensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputLimitSensors.tostring())
      length = len(self.inputHomeSensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.inputHomeSensors.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.probotPose is None:
        self.probotPose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.jointsPosition = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 56
      (_x.probotPose.position.x, _x.probotPose.position.y, _x.probotPose.position.z, _x.probotPose.orientation.x, _x.probotPose.orientation.y, _x.probotPose.orientation.z, _x.probotPose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputIOs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputIOs = list(map(bool, self.inputIOs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputIOs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputIOs = list(map(bool, self.outputIOs))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.outputRelay = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.outputRelay = list(map(bool, self.outputRelay))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputButton = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputButton = list(map(bool, self.inputButton))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputLimitSensors = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputLimitSensors = list(map(bool, self.inputLimitSensors))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputHomeSensors = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.inputHomeSensors = list(map(bool, self.inputHomeSensors))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
