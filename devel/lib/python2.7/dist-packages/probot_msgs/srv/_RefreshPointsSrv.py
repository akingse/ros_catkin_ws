# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from probot_msgs/RefreshPointsSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import probot_msgs.msg

class RefreshPointsSrvRequest(genpy.Message):
  _md5sum = "f08e45c8af24d4a195995ab547506c50"
  _type = "probot_msgs/RefreshPointsSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """

int8 ctrlCode

int8 POINTS_GET    = 0
int8 POINTS_ADD    = 1
int8 POINTS_UPDATE = 2
int8 POINTS_DELETE = 3

probot_msgs/PredefinedPointList pointList

================================================================================
MSG: probot_msgs/PredefinedPointList
# The predefined points list message contains all the pre-defined points

PredefinedPoint[] points

================================================================================
MSG: probot_msgs/PredefinedPoint
# The Predefined message contains the information of a pre-defined point on rviz

string name
geometry_msgs/Pose pose
float64[] joints
uint32 digitalOutput
uint32 relayOutput
float64 pointDelayBeforeExecute

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  POINTS_GET = 0
  POINTS_ADD = 1
  POINTS_UPDATE = 2
  POINTS_DELETE = 3

  __slots__ = ['ctrlCode','pointList']
  _slot_types = ['int8','probot_msgs/PredefinedPointList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ctrlCode,pointList

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RefreshPointsSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ctrlCode is None:
        self.ctrlCode = 0
      if self.pointList is None:
        self.pointList = probot_msgs.msg.PredefinedPointList()
    else:
      self.ctrlCode = 0
      self.pointList = probot_msgs.msg.PredefinedPointList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ctrlCode
      buff.write(_get_struct_b().pack(_x))
      length = len(self.pointList.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointList.points:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.joints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.joints))
        _x = val1
        buff.write(_get_struct_2Id().pack(_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pointList is None:
        self.pointList = probot_msgs.msg.PredefinedPointList()
      end = 0
      start = end
      end += 1
      (self.ctrlCode,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointList.points = []
      for i in range(0, length):
        val1 = probot_msgs.msg.PredefinedPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.joints = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute,) = _get_struct_2Id().unpack(str[start:end])
        self.pointList.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ctrlCode
      buff.write(_get_struct_b().pack(_x))
      length = len(self.pointList.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointList.points:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.joints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.joints.tostring())
        _x = val1
        buff.write(_get_struct_2Id().pack(_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pointList is None:
        self.pointList = probot_msgs.msg.PredefinedPointList()
      end = 0
      start = end
      end += 1
      (self.ctrlCode,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointList.points = []
      for i in range(0, length):
        val1 = probot_msgs.msg.PredefinedPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v10 = val1.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.joints = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 16
        (_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute,) = _get_struct_2Id().unpack(str[start:end])
        self.pointList.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Id = None
def _get_struct_2Id():
    global _struct_2Id
    if _struct_2Id is None:
        _struct_2Id = struct.Struct("<2Id")
    return _struct_2Id
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from probot_msgs/RefreshPointsSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import probot_msgs.msg

class RefreshPointsSrvResponse(genpy.Message):
  _md5sum = "9dfe497cd116d5e2b046e3b50c422dff"
  _type = "probot_msgs/RefreshPointsSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """probot_msgs/InterfaceReturnCode code
probot_msgs/PredefinedPointList pointListFeedback


================================================================================
MSG: probot_msgs/InterfaceReturnCode
# App Interface return codes for requests.  All App Interface service
# replies are required to have a return code indicating success or failure
# Specific return codes for different failure should be negative.
int8 val

int8 SUCCESS = 1
int8 FAILURE = -1
================================================================================
MSG: probot_msgs/PredefinedPointList
# The predefined points list message contains all the pre-defined points

PredefinedPoint[] points

================================================================================
MSG: probot_msgs/PredefinedPoint
# The Predefined message contains the information of a pre-defined point on rviz

string name
geometry_msgs/Pose pose
float64[] joints
uint32 digitalOutput
uint32 relayOutput
float64 pointDelayBeforeExecute

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['code','pointListFeedback']
  _slot_types = ['probot_msgs/InterfaceReturnCode','probot_msgs/PredefinedPointList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       code,pointListFeedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RefreshPointsSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.code is None:
        self.code = probot_msgs.msg.InterfaceReturnCode()
      if self.pointListFeedback is None:
        self.pointListFeedback = probot_msgs.msg.PredefinedPointList()
    else:
      self.code = probot_msgs.msg.InterfaceReturnCode()
      self.pointListFeedback = probot_msgs.msg.PredefinedPointList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.code.val
      buff.write(_get_struct_b().pack(_x))
      length = len(self.pointListFeedback.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointListFeedback.points:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = val1.pose
        _v14 = _v13.position
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.orientation
        _x = _v15
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.joints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.joints))
        _x = val1
        buff.write(_get_struct_2Id().pack(_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.code is None:
        self.code = probot_msgs.msg.InterfaceReturnCode()
      if self.pointListFeedback is None:
        self.pointListFeedback = probot_msgs.msg.PredefinedPointList()
      end = 0
      start = end
      end += 1
      (self.code.val,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointListFeedback.points = []
      for i in range(0, length):
        val1 = probot_msgs.msg.PredefinedPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v16 = val1.pose
        _v17 = _v16.position
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = _v16.orientation
        _x = _v18
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.joints = s.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute,) = _get_struct_2Id().unpack(str[start:end])
        self.pointListFeedback.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.code.val
      buff.write(_get_struct_b().pack(_x))
      length = len(self.pointListFeedback.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointListFeedback.points:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v19 = val1.pose
        _v20 = _v19.position
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = _v19.orientation
        _x = _v21
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.joints)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.joints.tostring())
        _x = val1
        buff.write(_get_struct_2Id().pack(_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.code is None:
        self.code = probot_msgs.msg.InterfaceReturnCode()
      if self.pointListFeedback is None:
        self.pointListFeedback = probot_msgs.msg.PredefinedPointList()
      end = 0
      start = end
      end += 1
      (self.code.val,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointListFeedback.points = []
      for i in range(0, length):
        val1 = probot_msgs.msg.PredefinedPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v22 = val1.pose
        _v23 = _v22.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = _v22.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.joints = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = val1
        start = end
        end += 16
        (_x.digitalOutput, _x.relayOutput, _x.pointDelayBeforeExecute,) = _get_struct_2Id().unpack(str[start:end])
        self.pointListFeedback.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Id = None
def _get_struct_2Id():
    global _struct_2Id
    if _struct_2Id is None:
        _struct_2Id = struct.Struct("<2Id")
    return _struct_2Id
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class RefreshPointsSrv(object):
  _type          = 'probot_msgs/RefreshPointsSrv'
  _md5sum = '45f7b8282295bca51124b6665b808529'
  _request_class  = RefreshPointsSrvRequest
  _response_class = RefreshPointsSrvResponse
